#!/usr/bin/env node
"use strict";

var currentDir = process.cwd();
var childProcess = require('child_process');
//var Builder = require('../lib/node/Builder');
var readline = require('readline');
var _epr = require('../lib/node/ExternalProcessRunner');
var epr = new _epr.default();

//var builder = new Builder();
//builder.logger = console;

function parseDirectoryToProjectNameStructure(dir) {
	var m;
	if( (m = /(?:^|\/)(docs|games|proj)\/([^\/]+)(?:$|\/)/.exec(dir)) ) {
		return {
			projectSectorName: m[1],
			projectName: m[2]
		}
	} else {
		return undefined;
	}
}

function _promptFor( rl, thing, defaultValue ) {
	return new Promise( function(resolve,reject) {
		rl.question(thing+" ["+defaultValue+"]> ", function(line) {
			var given = line.trim();
			if( given.length == 0 ) given = defaultValue;
			else if( given == '\\' ) given = '';
			resolve(given);
		});
		rl.once('close', function() { reject(new Error("Stream closed before question answered")) });
	});
}

function promptFor( rl, thing, defaultValue ) {
	var p = function() {
		return _promptFor(rl, thing, defaultValue).then(cb);
	}
	var cb = function(value) {
		if( value == '' ) {
			console.error(thing+" cannot be empty!")
			return p();
		}
		return value;
	}
	return p();
}

function doCommands( commands ) {
	var prom = Promise.resolve();
	for( var _c in commands ) (function(cmd) {
		prom = prom.then( function() {
			var opts = {
				onNz: 'error'
			}
			if( cmd[0] == 'ignore-error' ) {
				cmd = cmd.slice(1);
				opts.onNz = 'return';
			}
			//console.log('$ '+cmd.join(' '));
			return epr.doCmd( cmd, opts );
		});
	})(commands[_c]);
	return prom;
}

var cwd = process.cwd();
var projectNs = parseDirectoryToProjectNameStructure(cwd);
var projectFullName = projectNs == undefined ? "" : projectNs.projectSectorName+"/"+projectNs.projectName;
var gitUserName = 'TOGoS';
var gitUserEmail = 'togos00@gmail.com';
var shouldInitRemotes = false;
var shouldInitLocal = true;
var props = {};
var sshServers = {
	"fs.marvin": {
		sshUser: "tog",
		sshHost: "fs.marvin.nuke24.net",
		remoteGitRootDir: "/home/tog/git",
	},
	"harold": {
		sshUser: "stevens",
		sshHost: "harold.nuke24.net",
		remoteGitRootDir: "/home/stevens/git",
	},
	"toggh1": {
		sshUser: "tog",
		sshHost: "toggh1.nuke24.net",
		remoteGitRootDir: "/home/tog/git",
	},
	"togos-fbs": {
		sshUser: "tog",
		sshHost: "togos-fbs.nuke24.net",
		remoteGitRootDir: "/home/tog/git",
	}
};

var args = process.argv.slice(2);
for( var i=0; i<args.length; ++i ) {
	var arg = args[i];
	if( arg == '--local-only' ) {
		// Well this is the default, now, so whatever.
		shouldInitRemotes = false;
	} else if( arg == '--init-remotes' ) {
		shouldInitRemotes = true;
	} else {
		console.error("Unrecognized argument: '"+arg+"'");
		process.exitCode = 1;
		return;
	}
}


// TODO: Add gitlab servers, etc.

var rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});

var projectGitRemotes = {};
promptFor(rl, "project sector/name", projectFullName).then( function(projectName) {
	var makePublic = true;
	var remoteCommandSets = [];
	for( var r in sshServers ) {
		var sshRemote = sshServers[r];
		var projectGitRepoDir = sshRemote.remoteGitRootDir+"/TOGoS/"+projectName+'.git'
		projectGitRemotes[r] = {
			url: "ssh://"+sshRemote.sshUser+"@"+sshRemote.sshHost+projectGitRepoDir
		};
		var remoteCommands = [
			'mkdir -p '+projectGitRepoDir,
			'cd '+projectGitRepoDir,
			'git --bare init'
		];
		if( makePublic ) {
			remoteCommands.push('mv hooks/post-update.sample hooks/post-update');
			remoteCommands.push('chmod +x hooks/post-update');
		}
		remoteCommandSets.push([
			['ssh', '-o', 'ConnectTimeout=10', sshRemote.sshUser+'@'+sshRemote.sshHost,
				"sh -c '"+remoteCommands.join(' && ')+"'"]
		]);
	}
	
	var remoteCommandPromise = Promise.resolve();
	if( shouldInitRemotes ) for( var s in remoteCommandSets ) (function(commandSet) {
		remoteCommandPromise = remoteCommandPromise.then( function() { return doCommands(commandSet) } );
	})(remoteCommandSets[s]);
	return remoteCommandPromise;
}).then( function() {
	var localCommands = [
		['git','init'],
		['git','config','user.name',gitUserName],
		['git','config','user.email',gitUserEmail],
	];
	for( var r in projectGitRemotes ) {
		localCommands.push(['ignore-error','git','remote','add',r,projectGitRemotes[r].url]);
	}
	return shouldInitLocal ? doCommands(localCommands) : Promise.resolve();
}).then( function() {
	console.log("Okay, you're all set up!");
}).catch( function (err) {
	console.error(err.stack);
	process.exitCode = 1;
}).then( function() {
	rl.close();
});

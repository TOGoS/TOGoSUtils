#!/usr/bin/ruby

module TOGoS
  # Encodes and decodes strings to/from RFC-3548 Base32 (see http://tools.ietf.org/html/rfc3548)
  # Based on code found at http://bitcollider.cvs.sourceforge.net/bitcollider/jbitcollider/plugins/org.bitpedia.collider.core/src/org/bitpedia/util/Base32.java?view=markup
  module Base32
    BASE32_CHARSET = [
    	?A, ?B, ?C, ?D, ?E, ?F, ?G, ?H, ?I, ?J, ?K, ?L, ?M, ?N, ?O, ?P,
    	?Q, ?R, ?S, ?T, ?U, ?V, ?W, ?X, ?Y, ?Z, ?2, ?3, ?4, ?5, ?6, ?7
    ]
    BASE32_LOOKUP = [
      nil ,nil ,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F, # '0', '1', '2', '3', '4', '5', '6', '7'
      nil ,nil ,nil ,nil ,nil ,nil ,nil ,nil , # '8', '9', ':', ';', '<', '=', '>', '?'
      nil ,0x00,0x01,0x02,0x03,0x04,0x05,0x06, # '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G'
      0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E, # 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'
      0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16, # 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W'
      0x17,0x18,0x19,nil ,nil ,nil ,nil ,nil , # 'X', 'Y', 'Z', '[', '\', ']', '^', '_'
      nil ,0x00,0x01,0x02,0x03,0x04,0x05,0x06, # '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g'
      0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E, # 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'
      0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16, # 'p', 'q', 'r', 's', 't', 'u', 'v', 'w'
      0x17,0x18,0x19,nil ,nil ,nil ,nil ,nil   # 'x', 'y', 'z', '{', '|', '}', '~', 'DEL'
    ]
  
    def self.encode32( normalstring )
      base32string = ""
      nsl = normalstring.length
      i = 0
      index = 0
      digit = 0
      
      while i < nsl
        curr_byte = normalstring[i]
      
        if index > 3
          if i + 1 < nsl
            next_byte = normalstring[i+1]
          else
            next_byte = 0
          end
          
          digit = curr_byte & (0xFF >> index)
          index = (index + 5) % 8
          digit <<= index
          digit |= (next_byte >> (8 - index))
          i += 1
        else
          digit = (curr_byte >> (8 - (index + 5))) & 0x1F
          index = (index + 5) % 8
          i += 1 if index == 0
        end
        base32string << BASE32_CHARSET[digit]
      end
      
      return base32string
    end
    
    def self.decode32( base32string )
      b32l = base32string.length
      nsl = (b32l * 5 / 8)
      normalstring = "\0" * nsl
      i = 0
      index = 0
      offset = 0
      
      while i < b32l
        lookup = base32string[i] - ?0
        next if lookup < 0
        digit = BASE32_LOOKUP[lookup]

        if index <= 3
          index = (index + 5) % 8
          if index == 0
            normalstring[offset] |= digit
            offset += 1
            break if offset > nsl
          else
            normalstring[offset] |= (digit << (8 - index))
          end
        else
          index = (index + 5) % 8
          normalstring[offset] |= (digit >> index)
          offset += 1
          break if offset >= nsl
          normalstring[offset] |= (digit << (8 - index))
        end

        i += 1
      end
      
      return normalstring
    end
  end
end

require 'socket'

module DOGNDS ; module HTTP
  class HTTPUtil
    def self.normalize_headers( headers )
      normalized_headers = {}
      for (k,v) in headers
        k = k.downcase
        normalized_headers[k] ||= []
        if v.is_a? Array
          for v in v ; normalized_headers[k] << v ; end
        else
          normalized_headers[k] << v
        end
      end
      return normalized_headers
    end
    
    def self.header_lines( headers )
      header_lines = []
      for (k,v) in headers
        if v.is_a? Array
          for v in v
            header_lines << "#{k}: #{v}"
          end
        else
          header_lines << "#{k}: #{v}"
        end
      end
      return header_lines
    end
  end
  
  class HTTPRequest
    attr_accessor :verb, :resource_name
    attr_accessor :http_headers
    attr_accessor :content
    
    def initialize( verb, resource_name, headers={}, content=nil )
      self.verb = verb
      self.resource_name = resource_name
      self.http_headers = headers
      self.content = content
    end
  end
  
  class HTTPResponse
    attr_accessor :status_code, :status_text
    attr_accessor :http_headers
    attr_accessor :content
    
    def initialize
      self.http_headers = {}
    end
  end
  
  class SimpleHTTP1_0Client
    def format_request( req )
      if req.resource_name =~ %r<http://(?:([^/]+)@)?([^/]*)>
        auth = $1
        host = $2
        path = $'
      else
        raise "Not recognising this as an HTTP URL: "+req.resource_name
      end
      
      headers = HTTPUtil.normalize_headers( req.http_headers )
      headers['host'] = host
      
      content_allowed = req.verb != 'GET' && req.verb != 'HEAD'
      if content_allowed and req.content
        content = req.content.to_s
        headers['content-length'] = content.length
      else
        content = ''
        headers.delete('content-length')
      end
      
      header_lines = HTTPUtil.header_lines( headers )
      return "#{req.verb} #{path} HTTP/1.0\r\n" +
        header_lines.join("\r\n") +
        (header_lines.length == 0 ? "\r\n" : "\r\n\r\n") +
        content
    end
    
    def call( req )
      if req.resource_name =~ %r<http://(?:([^/]+)@)?([^/]+)>
        auth = $1
        host = $2
        if host =~ /:(\d+)$/
          host = $`
          port = $1.to_i
        else
          port = 80
        end
        if host =~ /^\[([^\]]+)\]$/
          host = $1
        end
      else
        raise "Not recognising this as an HTTP URL: "+req.resource_name
      end
      
      TCPSocket.open( host, port ) do |sock|
        sock.write format_request(req)
        sock.flush
        
        status_line = sock.gets.strip
        res = HTTPResponse.new
        (prot,status_code,status_text) = status_line.split(" ",3)
        res.status_code = status_code.to_i
        res.status_text = status_text
        while line = sock.gets and line.strip! and line != ''
          (k,v) = line.split(/:\s+/,2)
          (res.http_headers[k.downcase] ||= []) << v
        end
        res.content = sock.read
        return res
      end
    end
  end
end ; end

module DOGNDS ; module Crypto
  module KeyUtil
    # Will return an ASN.1 structure representing the 'public key
    # info' object, which you can then .to_der, the result of which
    # should be acceptable to Java and PHP's OpenSSL public
    # key-loading functions (though in PHP's case you will still need
    # to convert it to a PEM).
    #
    # key should be a OpenSSL::PKey::RSA object
    def self.public_key_info( key )
      OpenSSL::ASN1::Sequence.new([
        OpenSSL::ASN1::Sequence.new([
          OpenSSL::ASN1::ObjectId.new('rsaEncryption'),
          OpenSSL::ASN1::Null.new(nil)
        ]),
        OpenSSL::ASN1::BitString.new(key.public_key.to_der)
      ])
    end
  end
end ; end


require 'openssl'
require 'digest/sha1'



trim_input = false
generate = false
keypair_file = nil
rps = []

args = $*.clone
while arg = args.shift
  case arg
  when '-generate' ; generate = true
  when '-keypair-file' ; keypair_file = args.shift
  when '-trim-input' ; trim_input = true
  when '-',/^[^-]/ ; rps << arg
  else
    STDERR.puts "Unrecognised arg: #{arg}"
  end
end

unless keypair_file
  STDERR.puts "No -keypair-file specified"
  exit 1
end

if generate
  keypair = OpenSSL::PKey::RSA.new( 2048 )
  # Ruby does not seem to understand der-format keys
  open( keypair_file, 'wb' ) { |s| s.write(keypair.to_pem) }
  
  pubkeyinfo_data = DOGNDS::Crypto::KeyUtil.public_key_info( keypair ).to_der
  pubkey_hash = TOGoS::Base32.encode32(Digest::SHA1.digest(pubkeyinfo_data))
  
  open( pubkey_hash, 'wb' ) { |s| s.write( pubkeyinfo_data ) }
  puts "Key pair generated and written to #{keypair_file}"
  puts "Public key info written to #{pubkey_hash}"
  exit
end

unless rps.length == 3
  STDERR.puts "Too many arguments: "+rps.join(', ')
  STDERR.puts "Expected <method> <url> <data>"
  exit 1
end

req_method,req_url,data_file = rps

keypair_data = nil
open( keypair_file, 'rb' ) { |s| keypair_data = s.read }
keypair = OpenSSL::PKey::RSA.new( keypair_data, nil )

pubkeyinfo_data = DOGNDS::Crypto::KeyUtil.public_key_info( keypair ).to_der
pubkey_hash = TOGoS::Base32.encode32(Digest::SHA1.digest(pubkeyinfo_data))
pubkey_urn = 'urn:sha1:' + pubkey_hash

if data_file == '-'
  STDIN.binary
  data = STDIN.read
else
  open(data_file,'rb') { |s|
    data = s.read
  }
end

if trim_input
  data.strip!
end

digest = OpenSSL::Digest::SHA1.new
sig = keypair.sign(digest, data)

csig = "signature=#{sig.unpack('H*')}; algorithm=SHA1withRSA; signer=#{pubkey_urn}"

req = DOGNDS::HTTP::HTTPRequest.new( req_method, req_url, {'Content-Signature'=>csig}, data )
http_client = DOGNDS::HTTP::SimpleHTTP1_0Client.new
res = http_client.call( req )
unless (200..299) === res.status_code
  STDERR.puts "Request failed; #{res.status_code} #{res.status_text}"
  STDERR.puts res.content.rstrip
  exit 1
end

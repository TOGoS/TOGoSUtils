#!/usr/bin/ruby

# See note about the required 'touch' version below...

require 'fileutils'
require 'time'

USAGE = <<EOS
Usage: copy-incoming-pix [options] [input dir] ...
Options:
  -image-dest <dir> ; dir to put images
  -video-dest <dir> ; dir to put videos
  -older-than "YYYY-mm-dd [HH:MM:SS]" ; only process files with mtime < given
  -newer-than "YYYY-mm-dd [HH:MM:SS]" ; only process files with mtime > given
  -newer-than-file <file> ; only process files with mtime > that of given one
  -mtime-offset [+-]<seconds> ; add this many seconds when determining file modification times
EOS

$dryrun = false
$input_dirs = []
$image_dest = nil
$video_dest = nil
$newer_than = nil
$older_than = nil
$mtime_offset = 0
$verbose = false
$transfer_mode = :copy

args = $*.clone
while arg = args.shift
  case arg
  when '-dryrun'
    $dryrun = true
  when '-link'
    $transfer_mode = :hardlink
  when '-mtime-offset'
    $mtime_offset = args.shift.to_i
  when '-image-dest'
    $image_dest = args.shift
  when '-video-dest'
    $video_dest = args.shift
  when '-newer-than'
    $newer_than = Time.parse(args.shift)
  when '-older-than'
    $older_than = Time.parse(args.shift)
  when '-newer-than-file'
    $newer_than = File.mtime(args.shift)
  when '-v', '-show-progress'
    $verbose = true
  when '-h', '-?', '--help'
    STDOUT << USAGE
    exit 0
  when /^[^-]/
    $input_dirs << arg
  else
    STDERR.puts "Unrecognised argument: " + arg
    STDERR << USAGE
    exit 1
  end
end

if $input_dirs.length == 0
  $input_dirs << File.dirname($0)
end

if $image_dest == nil
  STDERR.puts "No image dest dir specified"
end

if $video_dest == nil
  STDERR.puts "No video dest dir specified"
end

def copy_file( source, dest )
  if $dryrun
    puts "cp '#{source}' '#{dest}'"
    return
  end
  
  temp = File.dirname(dest)+"/."+File.basename(dest)+".temp"
  
  buf = ""
  expected_size = File.size(source)
  amount_copied = 0
  begin
    open( source, 'rb' ) do |instream|
      open( temp, 'wb' ) do |outstream|
        while buf = instream.readpartial( 65536, buf )
          # .bytesize used to be .length, but this stopped working
          # with some Ruby v2.3.1, or maybe because my locale is Czech.
          # I think it was counting UTF-8-encoded characters in my JPEGs.
          # Fortunately it looks like .bytesize works with any Ruby version I care to run.
          amount_copied += buf.bytesize
          outstream.write( buf )
        end
      end
    end
  rescue EOFError
  ensure
    if amount_copied < expected_size
      STDERR.puts "Failed to copy all data to #{temp} (#{amount_copied} / #{expected_size} bytes); deleting"
      FileUtils.rm( temp )
      return false
    else
      FileUtils.mv( temp, dest )
      return true
    end
  end
end

def link_file( source, dest )
  if $dryrun
    puts "ln '#{source}' '#{dest}'"
    return
  end
  
  FileUtils.ln( source, dest )
end

def transfer_file( source, dest )
  dest_dir = File.dirname(dest)
  unless File.directory? dest_dir
    if $dryrun
      puts "mkdir '#{dest_dir}'"
    else
      FileUtils.mkdir_p(dest_dir)
    end
  end
  
  case $transfer_mode
  when :copy
    copy_file( source, dest )
  when :hardlink
    link_file( source, dest )
  else
    raise "Unrecognized transfer mode (indicates bug in #{File.basename($0)}): '#{$transfer_mode}'"
  end
end

def walk( dir, &prok )
  if File.directory? dir
    Dir.foreach( dir ) do |fn|
      next if fn[0] == ?.
      walk( "#{dir}/#{fn}", &prok )
    end
  else
    prok.call( dir )
  end
end

# This relies on the coreutils version of the touch command being installed.
# The UnxUtils version's -t argument takes a different syntax that is incompatible
# with that of touch found on my Linux machines.  Get the coreutils version from
# http://gnuwin32.sourceforge.net/packages/coreutils.htm (bin and dlls)
def touch( file, mtime )
  FileUtils.touch file, :mtime => mtime
  #system("touch -t #{mtime.strftime('%Y%m%d%H%M.%S')} #{file.inspect}")
end

def figger_mtime( file )
  begin
    return File.mtime(file) + $mtime_offset
    return File.mtime(file)
  rescue ArgumentError
    return Time.at(0)
  end
end

$files_found     = 0
$files_ignored   = 0
$files_processed = 0
$files_existing  = 0 # i.e. not copied because the destination's already there
$files_copied    = 0

def process_image( infile )
  $files_processed += 1
  return unless $image_dest
  mtime = figger_mtime( infile )
  return if $newer_than and mtime <= $newer_than
  return if $older_than and mtime >= $older_than
  outfile = $image_dest + '/' + mtime.strftime('%Y/%m/%Y_%m_%d/%H%M%S-') + File.basename(infile)
  return if File.exist? outfile
  return unless transfer_file( infile, outfile )
  touch( outfile, mtime )
  if outfile =~ /\.jpe?g/
    system "jhead -autorot \"#{outfile}\""
  end
  $files_copied += 1
end

def process_video( infile )
  $files_processed += 1
  return unless $video_dest
  mtime = figger_mtime( infile )
  return if $newer_than and mtime <= $newer_than
  return if $older_than and mtime >= $older_than
  outfile = $video_dest + '/' + mtime.strftime('%Y/%m/%Y_%m_%d/%H%M%S-') + File.basename(infile)
  return if File.exist? outfile
  outdir = File.dirname(outfile)
  FileUtils.mkdir_p( outdir ) unless File.exist?( outdir )
  return unless transfer_file( infile, outfile )
  touch( outfile, mtime )
  $files_copied += 1
end

def cropend( str, size )
  if str.length > size
    return str[str.length-size..-1]
  else
    return str
  end
end

if $verbose
  STDERR.printf "%6.6s / %6.6s / %6.6s ; %s\n", 'found', 'processed', 'copied', 'latest'
end

for indir in $input_dirs
  begin
    walk( indir ) do |file|
      $files_found += 1
      case file
      when /\.(jpe?g|png|gif|bmp|tiff)$/i
        process_image( file )
      when /\.(?:avi|mov|wmv|asf|mkv|ogv|mp4|3gp)$/i
        process_video( file )
      else
        $files_ignored += 1
      end
      if $verbose
        STDERR.printf "% 6d / % 6d / % 6d ; %40.40s\r", $files_found, $files_processed, $files_copied, cropend(file,40)
      end
    end
  rescue Errno::ENOENT => e
    STDERR.puts e.message
  end
end

if $verbose
  STDERR.puts
end

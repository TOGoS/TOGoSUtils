#!/usr/bin/node
"use strict";

const fs = require('fs');

function readDir(dir) {
	return new Promise( (resolve,reject) => {
		fs.readdir(dir, (err,files) => {
			if( err ) reject(err);
			else resolve(files);
		});
	});
}

const argv = process.argv.slice(2);
const argv0 = process.argv[1];

function printHelp() {
	console.log("Usage: "+argv0+" {--help|--run|--dry-run} [options]");
	console.log("Options:");
	console.log("  -r <to-be-replaced> <replacement> ; replace these strings before doing other clean-up");
	console.log("  -q | --quiet                      ; be less verbose");
	console.log("  -v | --verbose                    ; be more verbose");
	console.log("  --insert-artist=<name>            ; artist name to be inserted after track number");
	console.log("  --capitalize-words                ; capitalize (most) words in filenames");
}

let dirs = [];
let replacements = [
	["feat.","feat"]
];
let artistNameToInsert = undefined;
let shouldCapitalizeWords = false;
let mode = undefined;
let verbosity = undefined;
let m;
for( let i=0; i<argv.length; ++i ) {
	let arg = argv[i];
	if( arg == '-r' ) {
		let replaced = argv[++i];
		let replacer = argv[++i];
		replacements.push( [replaced,replacer] );
	} else if( arg == '--run' ) {
		mode = 'run';
	} else if( arg == '--dry-run' ) {
		mode = 'dry-run';
	} else if( (m = /^--insert-artist=(.*)/.exec(arg)) ) {
		artistNameToInsert = m[1];
	} else if( arg == '--capitalize-words' ) {
		shouldCapitalizeWords = true;
	} else if( arg == '-q' || arg == '--quiet' ) {
		verbosity = 50;
	} else if( arg == '-v' || arg == '--verbose' ) {
		verbosity = 200;
	} else if( arg == "-h" || arg == "-?" || arg == "--help" ) {
		mode = 'help';
	} else if( arg[0] == '-' ) {
		console.error(argv0+": Error: Unrecognized argument: '"+arg+"''; maybe try --help");
		process.exit(1);
	} else {
		dirs.push(arg);
	}
}

if( mode == undefined ) {
	console.error("No mode specified; try --help or --dry-run");
	process.exit(1);
} else if( mode == 'help' ) {
	printHelp();
	process.exit(0);
}

if( verbosity == undefined ) {
	if( mode == 'dry-run' ) {
		verbosity = 200;
	} else if( mode == 'run' ) {
		verbosity = 100;
	}
}

if( dirs.length == 0 ) dirs.push('.');

function fixFilename( fn ) {
	for( let r in replacements ) {
		fn = fn.split(replacements[r][0]).join(replacements[r][1]);
	}
	// Put proper thing between track number and title
	fn = fn.replace(/^(\d+)[\._ -]+/,
		(artistNameToInsert == undefined) ? '$1-' : '$1-'+artistNameToInsert+'-');
	
	fn = fn.replace(/ /g,'_');                // Replace spaces!
	fn = fn.replace(/[\(\[\{\)\]\}]/g,'-');   // Parentheses become "-"
	fn = fn.replace(/[_-]*-+[_-]*/g,'-');     // Spacelikes around "-" get folded into the "-", e.g. "_-_"
	fn = fn.replace(/[_-]$|^[_-]/g,'');       // Remove spacelikes at beginning and end
	fn = fn.replace(/[_-]*\.[_-]*/g,'.');     // Remove spacelikes around "."
	fn = fn.replace(/[^a-zA-Z0-9\._+-]/g,''); // Remove any odd characters that are left
	if( shouldCapitalizeWords ) {
		fn = fn.replace(/(\b|[\s_-])(([^\s_-])([^\s_-]*))/g, (match, prefix, word, firstLetter, restOfWord) => {
				if( word == 'feat' ) return prefix+word;
			return prefix + firstLetter.toUpperCase() + restOfWord;
		});
	}
	return fn;
}

const quot="'";
const dquot='"';

function shellEscape(fn) {
	if( /^[a-zA-Z0-9\._+-\/]+$/.exec(fn) ) {
		return fn
	} else if( /^[^"\$\\]+$/.exec(fn) ) {
		return '"' + fn + '"';
	} else if( /^[^'\\]+$/.exec(fn) ) {
		return "'" + fn + "'";
	} else {
		return quot + fn.replace(/'/g, quot+dquot+quot+dquot+quot) + quot;
	}
}

let pp = [];
for( let d in dirs ) {
	let dir = dirs[d];
	pp.push(readDir(dir).then( (filenames) => {
		let renamePs = [];
		for( let i in filenames ) {
			let filename = filenames[i];
			let fixed = fixFilename(filename);
			if( fixed == filename ) continue;
			if( mode == 'dry-run' && verbosity >= 50 ) {
				console.log('mv '+shellEscape(dir+'/'+filename)+" "+shellEscape(dir+'/'+fixed));
			}
			if( mode == 'run' && filename != fixed ) {
				renamePs.push(new Promise( (resolve,reject) => {
					fs.rename( dir+'/'+filename, dir+'/'+fixed, (err) => {
						if( err ) reject(err);
						else resolve();
					});
				}));
			}
		}
		return Promise.all(renamePs);
	}));
}

Promise.all(pp).then( () => {
	if( mode != 'run' && verbosity >= 100 ) {
		console.error("Nothing actually renamed.  Pass --run to actually do it")
	}
}, (err) => {
	console.error(err.stack || err);
	process.exitCode = 1;
});

#!/usr/bin/env node

const repoNames = [
	"EarthIT/OIDAllocator",
	"TOGoS/docs/doke",
	"TOGoS/docs/imps",
	"TOGoS/docs/job",
	"TOGoS/docs/meeting-notes",
	"TOGoS/docs/financial/4909",
	"TOGoS/docs/ArchiveInfo",
	"TOGoS/docs/ProjectNotes2",
	"TOGoS/docs/sysnotes",
	"TOGoS/docs/LoveNotes",
	"TOGoS/job/EarthIT/timelog",
	"TOGoS/job/Factorio/notes",
	"TOGoS/job/SA/notes",
	"TOGoS/job/JHT/notes",
	"TOGoS/music/TOGoSMusicMetadata",
	"TOGoS/proj/TOGoSUtils",
	"TOGoS/proj/SynthGen2100",
	"TOGoS/sites/nuke24",
	"TOGoS/sites/dp",
];

const ANSI_FG_YELLOW = 33;
const ANSI_FG_RED = 31;
const ANSI_RESET = 0;

function termColorCode(colorCode) {
	return "\x1b["+colorCode+"m";
}

function prettifyPath(path) {
	let m;
	if( (m = /^([a-zA-Z]):(.*)$/.exec(path)) != null ) {
		// If Windows path, uppercase drive letter for beauty,
		// and convert / to \ for copy-paste-ability into CMD:
		return m[1].toUpperCase()+":"+m[2].replaceAll('/','\\');
	} else {
		return path;
	}
}

function listToSet(list, filter) {
	var set = {};
	for( var i in list ) {
		var v = filter(list[i]);
		if( v != undefined ) set[v] = v;
	}
	return set;
}

// Given a repo/project name like "TOGoS/docs/ProjectNotes2",
// return only the project name, like "ProjectNotes2"
function toGithubProjectName( repoName ) {
	if( (m = /^TOGoS\/.*\/([^\/]+)$/.exec(repoName)) ) {
		return "TOGoS/"+m[1];
	}
}

const remoteGenerators = [
	(repoName) => [{name: "fs.marvin", url: "ssh://tog@fs.marvin.nuke24.net/~tog/git/"+repoName+".git"}],
	(repoName) => [{name: "togos-fbs", url: "ssh://tog@togos-fbs.nuke24.net/~tog/git/"+repoName+".git"}],
	(repoName) => [{name: "toggh1", url: "ssh://tog@toggh1.nuke24.net/~tog/git/"+repoName+".git"}],
	(repoName) => [{name: "github", url: "ssh://git@github.com/"+toGithubProjectName(repoName)+".git"}],
	(repoName) => [{name: "gitlab", url: "ssh://git@gitlab.com/"+toGithubProjectName(repoName)+".git"}],
];

var fsu = require('../src/lib/node/FSUtil');
var ExternalProcessRunner = require('../src/lib/node/ExternalProcessRunner').default;

var homeDirCandidates = listToSet([
	process.env.HOME,
	process.env.USERPROFILE,
	process.env.HOMEDRIVE + process.env.HOMEPATH,
	'D:',
], (x) => (x != null && x != '') ? x : undefined);
var stuffPostfixCandidates = ['', '/stuff']

function findRepo(repoName) {
	var m;
	var promises = [];
	var allPaths = [];
	if( (m = /^EarthIT\/(.*)/.exec(repoName)) ) {
		repoName = "TOGoS/proj/"+m[1]; // Hack until I rewrite all this code lol
		// (by rewrite all this I mean probably reference a file from ArchiveInfo,
		// see related notes in timelog from 2021-11-11 if curious).
	}
	if( (m = /^TOGoS\/(.*)/.exec(repoName)) ) {
		var mainName = m[1];
		var homeDir;
		var stuffPostfix;
		var hd;
		var pc;
		for( hd in homeDirCandidates ) {
			homeDir = homeDirCandidates[hd];
			if( homeDir == undefined ) continue;
			for( pc in stuffPostfixCandidates ) {
				stuffPostfix = stuffPostfixCandidates[pc];
				(fullPath => promises.push( fsu.stat(fullPath).then(stat => {
					if( stat.isDirectory() ) allPaths.push(prettifyPath(fullPath));
				}, error => {
					// Do nothing
				})))(homeDir + stuffPostfix + "/" + mainName);
			}
		}
	}
	return Promise.all(promises).then( () => allPaths );
}

const xpr = new ExternalProcessRunner();
//xpr.logger = console;

let remoteFilter = (remote) => {
	return true;
}

function NotOnMasterError(message) {
	this.name = 'NotOnMasterError';
	this.message = message;
	this.stack = (new Error()).stack;
}
NotOnMasterError.prototype = new Error;

function updateRepo(path, repoName) {
	return fsu.readFileToString(path+"/.git/HEAD").then( headStr => {
		return headStr.trim().split(/:\s+/)[1];
	}).then( headName => {
		if( headName != "refs/heads/master" ) return Promise.reject(new NotOnMasterError("Not on master; HEAD="+headName));
	}).then( () => {
		var remotes = [];
		remoteGenerators.forEach( gen => {
			remotes = remotes.concat( gen(repoName) );
		});
		var prom = Promise.resolve();
		var successfulPullCount = 0;
		var errorsByRemote = {};
		remotes.filter( remoteFilter ).forEach( remote => {
			prom = prom.then( () => {
				var cmdOpts = {
					cwd: path,
					silent: true,
					onNz: 'error',
				};
				//console.log("cd "+path+" && git pull "+remote.url+" master");
				return xpr.doCmd(["git","pull",remote.url,"master"], cmdOpts).then( () => {
					++successfulPullCount;
				});
			}).catch( err => {
				//console.error("Error pulling from "+remote.url);
				errorsByRemote[remote.name] = [err];
			});
		});
		return prom.then( () => ({
			successfulPullCount,
			errorsByRemote,
		}));
	});
}

let interactiveResolutionMode = "none";

let processArgsPromise = new Promise((resolve,reject) => {
	let selfName = process.argv[1];
	for( let i=2; i<process.argv.length; ++i ) {
		let m;
		let arg = process.argv[i];
		if( (m = /^--remotes=(.*)$/.exec(arg)) ) {
			let remoteNames = m[1].split(',');
			remoteFilter = (remote) => {
				return remoteNames.indexOf(remote.name) >= 0;
			};
		} else if( arg == "--interactive-resolution=cmd" ) {
			interactiveResolutionMode = "cmd";
		} else if( arg == "--help" || arg == "-?" ) {
			console.log("Usage: "+selfName+" [--remotes=<remote1>,<remote2>...] [--interactive-resolution=cmd]");
			reject(0);
		} else {
			console.error("Error: Unrecognized argument: "+arg);
			console.error("Try '"+selfName+" --help' for help");
			reject(1);
		}
	}
	resolve();
});

let pullFailures = [];

processArgsPromise.then( (_exitCode) => {
	let rp0 = Promise.resolve();
	repoNames.forEach( repoName => {
		const p0 = findRepo(repoName).then( paths => {
			let rp1 = Promise.resolve();
			//console.log(repoName + " -> " + paths.join(", "))
			paths.forEach( path => {
				path = prettifyPath(path);
				let p1 = updateRepo(path, repoName).then( result => {
					if( result.successfulPullCount > 0 ) {
						console.log("Updated "+path);
					} else {
						var remotesList = [];
						for( var remoteName in result.errorsByRemote ) {
							remotesList.push("- "+remoteName+": "+result.errorsByRemote[remoteName][0].message);
						}
						console.error(termColorCode(ANSI_FG_RED));
						console.error("Did not update "+path+": no pulls were successful; "+
							(remotesList.length > 0 ? "attempted remotes:\n"+remotesList.join("\n") : "no remotes configured!"));
						console.error(termColorCode(ANSI_RESET));
						pullFailures.push({
							path,
						});
					}
				}, error => {
					if( error instanceof NotOnMasterError ) {
						console.error(termColorCode(ANSI_FG_YELLOW));
						console.error("Did not update "+path+": "+error.message);
						console.error(termColorCode(ANSI_RESET));
					} else {
						console.error(termColorCode(ANSI_FG_RED));
						console.error("Did not update "+path+": "+error.message);
						console.error(termColorCode(ANSI_RESET));
						pullFailures.push({
							path,
							error,
						});
					}
				});
				rp1 = rp1.then(() => p1);
			});
			return rp1;
		});
		rp0 = rp0.then(() => p0);
	});
	return rp0;
}).then( () => {
	if( pullFailures.length > 0 ) {
		// Maybe someday I make an interactive option that opens a cmd for each failed pull!
		console.error("Some pulls were not successfull; you may wish to investigate:");
		for( let f in pullFailures ) {
			console.error("  "+pullFailures[f].path);
		}
		switch( interactiveResolutionMode ) {
		case "none":
			console.error("exiting with status 1");
			process.exit(1);
			break;
		case "cmd":
			{
				let resolution = Promise.resolve();
				for( let f in pullFailures ) {
					const theFail = pullFailures[f];
					resolution = resolution.then(() => {
						console.error("Opening cmd in "+theFail.path+"; type 'exit 0' when done");
						console.log(termColorCode(33));
						return xpr.doCmd(["cmd"], {
							cwd: theFail.path
						}).then(() => {
							console.log(termColorCode(ANSI_RESET));
						}, (e) => {
							console.log(termColorCode(ANSI_RESET));
							return Promise.reject(e);
						});
					});
				}
				return resolution;
			}
		}
	}
}).then( () => {
	console.log(termColorCode(ANSI_RESET));	
}, (err) => {
	console.log(termColorCode(ANSI_RESET));
	if( typeof(err) == 'number' ) {
		process.exit(err);
	} else {
		console.error(err.stack);
		process.exit(1);
	}
})

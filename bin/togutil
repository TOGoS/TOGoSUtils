#!/usr/bin/env node

let fsu = require('../lib/node/FSUtil');

function promiseEach( items, callback ) {
	return items.reduce( (prom,item) => prom.then( () => callback(item) ), Promise.resolve() );
}

function reportHeads(headsDir, headName) {
	let tshash = require('tshash');
	let dir = headsDir+"/"+headName;
	return fsu.readDir(dir).then( files => promiseEach(files, filename => {
		// TODO: Ignore subdirs
		let fullPath = dir + "/" + filename;
		let headUri = "x-ccouch-head:"+headName+"/"+filename;
		return fsu.readFileToUint8Array(fullPath).then(tshash.sha1Urn).then( sha1Urn => {
			console.log(headUri+" "+sha1Urn);
		});
	}));
}

function findCcouchDir() {
	if( process.env.ccouch_repo_dir != undefined ) {
		return Promise.resolve(process.env.ccouch_repo_dir);
	} else {
		return Promise.reject(new Error("ccouch_repo_dir not specified"));
	}
}

const commands = {
	"help": {
		shortDescription: "Show help",
		invoke: (args) => {
			console.log("Usage: togutil <subcommand> ")
			console.log("Subcommands:");
			for( let c in commands ) {
				console.log("  " + c + ": " + commands[c].shortDescription);
			}
			return Promise.resolve();
		}
	},
	"list-ccouch-heads": {
		shortDescription: "List ccouch heads and their hashes",
		invoke: (args) => {
			return findCcouchDir().then( (ccouchDir) => {
				let headsDir = ccouchDir + "/heads";
				let headNames = [];
				for( let a in args ) {
					headNames.push(args[a]);
				}
				return promiseEach(headNames, headName => reportHeads(headsDir, headName));
			});
		}
	}
}


const optRegex = /^-/;
function parseArgs(argv) {
	let commandName = undefined;
	let generalArgs = [];
	let commandArgs = [];
	for( let i=2; i<argv.length; ++i ) {
		if( commandName == undefined ) {
			if( !optRegex.exec(argv[i]) ) {
				commandName = argv[i];
			} else if( argv[i] == "-?" || argv[i] == "--help" ) {
				commandName = "help";
			} else {
				generalArgs.push(argv[i]);
			}
		} else if( commandName != undefined ) {
			commandArgs.push(argv[i]);
		}
	}
	return Promise.resolve({
		commandName,
		generalArgs,
		commandArgs
	})
}

parseArgs(process.argv).then( commandInfo => {
	if( commandInfo.commandName == undefined ) {
		console.log("Welcome to TOGUtil!");
		console.log("No command given.  Try 'help'");
		return;
	}
	let command = commands[commandInfo.commandName];
	if( command == undefined ) {
		console.error("Unrecognized command: '"+commandInfo.commandName+".  Try 'help'");
		process.exitCode = 1;
		return;
	}
	return command.invoke(commandInfo.commandArgs);
}).catch( e => {
	process.exitCode = 1;
	console.error("Rejected!");
	console.error(e.stack);
})

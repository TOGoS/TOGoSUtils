#!/usr/bin/env node

let fsu = require('../src/lib/node/FSUtil');
let CCouchTool = require('togosutils/CCouchTool').default;

let verbosity = 100; // 0 = silent, 50 = errors, 100 = warnings, 200 = informational, 300 = extremely verbose
const Log = {
	i: function(tag, stuff) {
		if( verbosity >= 200 ) {
			console.log("# "+tag+"/info: "+stuff);
		}
	},
	equivalence: function(names) {
		if( verbosity > 0 && names.length > 0 ) {
			console.log(names.join("\t"));
		}
	},
	head: function(head) {
		this.equivalence([head.headUri, "file:"+head.file, head.hashUrn]);
	}
}

const commands = {
	"help": {
		shortDescription: "Show help",
		invoke: (args) => {
			console.log("Usage: togutil <subcommand> ")
			console.log("Subcommands:");
			for( let c in commands ) {
				console.log("  " + c + ": " + commands[c].shortDescription);
			}
			return Promise.resolve();
		}
	},
	"list-ccouch-heads": {
		shortDescription: "List ccouch heads and their hashes",
		invoke: (args) => {
			let opts = {
				headPrefixes: [],
				lastN: Infinity,
				recurse: false,
			}
			let m;
			for( let i=0; i<args.length; ++i ) {
				if( args[i] == '--recurse' ) {
					opts.recurse = true;
				} else if( (m = /^--last=(\d+)$/.exec(args[i])) ) {
					opts.lastN = +m[1];
				} else {
					opts.headPrefixes.push(args[i]);
				}
			}
			if( opts.headPrefixes.length == 0 ) {
				Log.i("list-ccouch-heads", "No heads specified; result will be empty");
			}
			let cct = new CCouchTool();
			return cct.findLocalHeads(opts, (head) => {
				Log.head(head);
			});
		}
	}
}


const optRegex = /^-/;
function parseArgs(argv) {
	let commandName = undefined;
	let generalOptions = {
		verbosity: 100
	};
	let commandArgs = [];
	for( let i=2; i<argv.length; ++i ) {
		if( commandName == undefined ) {
			if( !optRegex.exec(argv[i]) ) {
				commandName = argv[i];
			} else if( argv[i] == "-?" || argv[i] == "--help" ) {
				commandName = "help";
			} else if( argv[i] == "-qq" ) {
				generalOptions.verbosity = 0;
			} else if( argv[i] == "-q" ) {
				generalOptions.verbosity = 50;
			} else if( argv[i] == "-v" ) {
				generalOptions.verbosity = 200;
			} else if( argv[i] == "-vv" ) {
				generalOptions.verbosity = 300;
			} else {
				return Promise.reject(new Error(`Unrecognized general argument: ${argv[i]}`));
			}
		} else if( commandName != undefined ) {
			commandArgs.push(argv[i]);
		}
	}
	return Promise.resolve({
		commandName,
		generalOptions,
		commandArgs
	})
}

parseArgs(process.argv).then( commandInfo => {
	verbosity = commandInfo.generalOptions.verbosity;
	if( commandInfo.commandName == undefined ) {
		console.log("Welcome to TOGUtil!");
		console.log("No command given.  Try 'help'");
		return;
	}
	let command = commands[commandInfo.commandName];
	if( command == undefined ) {
		console.error("Unrecognized command: '"+commandInfo.commandName+"'.  Try 'help'");
		process.exitCode = 1;
		return;
	}
	return command.invoke(commandInfo.commandArgs);
}).catch( e => {
	process.exitCode = 1;
	console.error("Rejected!");
	console.error(e.stack);
})

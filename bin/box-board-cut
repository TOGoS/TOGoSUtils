#!/usr/bin/env node

const ca = require('./inchify');

let dims = [];
let thickness = {"in": {numerator:1, denominator:2}};
let dadoDepth = {}; // i.e. 0
let dividerCount = 0;
let denominator = 32;

const numberArgRegex = /^--(\d+)$/;
const regularArgRegex = /^[^-]/;

for( let i=2; i<process.argv.length; ++i ) {
	let arg = process.argv[i];
	let m;
	if( (m = /^--dividers=(\d+)$/.exec(arg)) ) {
		dividerCount += arg;
	} else if( (m = numberArgRegex.exec(arg)) ) {
		denominator = +m[1];
	} else if( (m = /^--thickness=(.*)$/.exec(arg)) ) {
		thickness = ca.parseComplexAmount(m[1]);
	} else if( (m = /^--dado-depth=(.*)$/.exec(arg)) ) {
		dadoDepth = ca.parseComplexAmount(m[1]);
	} else if( regularArgRegex.exec(arg) ) {
		dims.push(ca.parseComplexAmount(arg));
	} else {
		throw new Error("Unrecognized argument: "+arg);
	}
}

if( dims.length != 3 ) {
	throw new Error("Give me a width, height, and depth.  Gave "+dims.length+" dimensions");
}

console.log("Board thickness: "+ca.formatComplexAmount(thickness));
console.log("Dado depth: "+ca.formatComplexAmount(dadoDepth));

let caToUm = ca.complexAmountToMicrometers
let remainderUm = caToUm(thickness) - caToUm(dadoDepth);
console.log("Thickness behind dados: "+ca.formatComplexAmount(umToCa(remainderUm)));
let dimsUm = dims.map(caToUm);
function umToCa(um) {
	return {"in": {numerator: um/25400, denominator:1}};
}

let cuts = [];
cuts.push( {count: 2, name:"top/bottom", dimensions:[dims[0], dims[2]]} );
cuts.push( {count: 1, name:"back", dimensions:[dims[0], umToCa(dimsUm[1] - 2*remainderUm)]} );
cuts.push( {count: dividerCount+2, name:"ends/dividers", dimensions: [umToCa(dimsUm[2] - remainderUm), umToCa(dimsUm[1] - 2*remainderUm)]} );

let longestNameLength = 0;
for( let c in cuts ) {
	longestNameLength = Math.max(longestNameLength, cuts[c].name);
}

console.log();
console.log("Cuts: ");
for( let c in cuts ) {
	let cut = cuts[c];
	console.log("  (" + cut.count + ") " + cut.dimensions.map(dim => ca.formatComplexAmount(ca.denominateComplexAmount(dim, denominator))).join(" x ") + " -- " + cut.name)
}

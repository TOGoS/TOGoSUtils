#!/usr/bin/env node

// A 'complex amount' is a thing like: {<unit> => {numerator:<n>, denominator:<d>}}

function parseComplexAmount(amtStr) {
   let m;
   if( (m = /^(?:(\d+)\+)?(\d+(?:\.\d+)?)(?:\/(\d+(?:\.\d+)?))?(\w+)?$/.exec(amtStr)) ) {
      let whole = +(m[1] || 0);
      let numerator = +m[2];
      let denominator = +(m[3] || 1);
      let unitCode = (m[4] || 'in');
      return {[unitCode]: {numerator: (whole*denominator)+numerator, denominator}};
   } else {
      throw new Error("Failed to parse '"+amtStr+"'");
   }
}

function formatFraction(num, den, maxDigits) {
	if( den == undefined ) throw new Error("den unspecified");
	if( maxDigits == undefined ) maxDigits = 2;
	let numStr = Math.round(num) == num ? num : num.toFixed(maxDigits);
	return numStr + (den == 1 ? "" : "/"+den);
}

function formatComplexAmount(amt) {
   let parts = [];
   for( let unitCode in amt ) {
      let q = amt[unitCode];

		let pParts = [];
		if( q.denominator == 1 ) {
			pParts.push(formatFraction(q.numerator, q.denominator));
		} else {
			// TODO: Handle negatives!!!
			let wholes = Math.floor(q.numerator / q.denominator);
			let num = q.numerator - wholes*q.denominator;

			if( wholes > 0 ) pParts.push(wholes);
			if( num != 0 ) pParts.push(formatFraction(num, q.denominator));
		}
		
		parts.push(	pParts.join('+') + unitCode);
	}
	return parts.join(" + ");
}

const micrometerUnitValues = {
	'µm': 1,
	'mm': 1000,
	'cm': 10000,
	'in': 25400,
	'mil': 25.4,
};
const unitAliases = {
	'um': 'µm',
	'inch': 'in',
	'inches': 'inch',
};

// We'll use micrometers internally so that inches can be an integer multiple
function complexAmountToMicrometers(amt) {
	let totalMicrometers = 0;
	for( let unitCode in amt ) {
		let q = amt[unitCode];
		if( unitAliases[unitCode] ) unitCode = unitAliases[unitCode];
		let multiplier = micrometerUnitValues[unitCode];
		if( multiplier == undefined ) throw new Error("Unrecognized unit: "+unitCode);

		totalMicrometers += multiplier * q.numerator / q.denominator;
	}
	return totalMicrometers;
}

function micrometersToInches(um) {
	return um / 25400;
}


function scaleComplexAmount(amt, scale) {
	let scaled = {};
	for( let unitCode in amt ) {
		let q = amt[unitCode];
		scaled[unitCode] = {numerator:q.numerator * scale, denominator:q.denominator};
	}
	return scaled;
}

function denominateComplexAmount(amt, denominator) {
	if( denominator == undefined ) denominator = 1;
	let fixed = {};
	for( let unitCode in amt ) {
		let q = amt[unitCode];
		let value = q.numerator / q.denominator;
		let numerator = value * denominator;
		fixed[unitCode] = {numerator, denominator};
	}
	return fixed;
}


if( typeof(module) != 'undefined' && typeof(require) != 'undefined' && module == require.main ) {
	let denominator = 16;
	
	let mode = 'normal';
	let inputStrings = [];
	
	const numberArgRegex = /^--(\d+)$/;
	const regularArgRegex = /^[^-]/;
   
	for( let i=2; i<process.argv.length; ++i ) {
		let arg = process.argv[i];
		let m;
		if( (m = numberArgRegex.exec(arg)) ) {
			denominator = +m[1];
		} else if( regularArgRegex.exec(arg) ) {
			inputStrings.push(arg);
		} else if( arg == '--diagonal' ) {
			mode = 'diagonal';
		} else {
			throw new Error("Unrecognized argument: "+arg);
		}
	}
	
	if( mode == 'diagonal' ) {
		let totalSquared = 0;
		for( let i in inputStrings ) {
			let amt = parseComplexAmount(inputStrings[i]);
			let micrometers = complexAmountToMicrometers(amt);
			totalSquared += micrometers*micrometers;
		}
		let amt = {"in": {numerator: micrometersToInches(Math.sqrt(totalSquared)), denominator:1}};
		console.log("diagonal = "+formatComplexAmount(amt));
	} else {
		for( let i in inputStrings ) {
			let amt = parseComplexAmount(inputStrings[i]);
			amt = {"in": {numerator:micrometersToInches(complexAmountToMicrometers(amt)), denominator:1}};
			amt = denominateComplexAmount(amt, denominator);
			console.log(inputStrings[i] + " = " + formatComplexAmount(amt));
		}
	}
}

module.exports = {
	parseComplexAmount,
	formatComplexAmount,
	scaleComplexAmount,
	complexAmountToMicrometers,
	micrometersToInches,
	denominateComplexAmount
};

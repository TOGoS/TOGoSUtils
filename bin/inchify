#!/usr/bin/env node

let denominator = 16;

let mode = 'normal';
let inputStrings = [];

const numberArgRegex = /^--(\d+)$/;
const regularArgRegex = /^[^-]/;
    
for( let i=2; i<process.argv.length; ++i ) {
   let arg = process.argv[i];
   let m;
   if( (m = numberArgRegex.exec(arg)) ) {
      denominator = +m[1];
   } else if( regularArgRegex.exec(arg) ) {
      inputStrings.push(arg);
	} else if( arg == '--diagonal' ) {
		mode = 'diagonal';
   } else {
      throw new Error("Unrecognized argument: "+arg);
   }
}

// A 'complex amount' is a thing like: {<unit> => {numerator:<n>, denominator:<d>}}

function parseComplexAmount(amtStr) {
   let m;
   if( (m = /^(?:(\d+)\+)?(\d+(?:\.\d+)?)(?:\/(\d+(?:\.\d+)?))?(\w+)?$/.exec(amtStr)) ) {
      let whole = +(m[1] || 0);
      let numerator = +m[2];
      let denominator = +(m[3] || 1);
      let unitCode = (m[4] || 'in');
      return {[unitCode]: {numerator: (whole*denominator)+numerator, denominator}};
   } else {
      throw new Error("Failed to parse '"+amtStr+"'");
   }
}

function formatFraction(num, den, maxDigits) {
	if( den == undefined ) throw new Error("den unspecified");
	if( maxDigits == undefined ) maxDigits = 2;
	let numStr = Math.round(num) == num ? num : num.toFixed(maxDigits);
	return numStr + (den == 1 ? "" : "/"+den);
}

function formatComplexAmount(amt) {
   let parts = [];
   for( let unitCode in amt ) {
      let q = amt[unitCode];

		let pParts = [];
		if( q.denominator == 1 ) {
			pParts.push(formatFraction(q.numerator, q.denominator));
		} else {
			let wholes = Math.floor(q.numerator / q.denominator);
			let num = q.numerator - wholes*q.denominator;

			if( wholes > 0 ) pParts.push(wholes);
			if( num != 0 ) pParts.push(formatFraction(num, q.denominator));
		}
		
		parts.push(	pParts.join('+') + unitCode);
	}
	return parts.join(" + ");
}

function toInches(amt) {
	let totalInches = 0;
	for( let unitCode in amt ) {
		let q = amt[unitCode];
		let multiplier;
		if( unitCode == 'in' || unitCode == 'inch' || unitCode == 'inches' ) multiplier = 1;
		else if( unitCode == 'mm' ) multiplier = 1/25.4;
		else if( unitCode == 'cm' ) multiplier = 1/2.54;
		else throw new Error("Unrecognized unit: "+unitCode);

		totalInches += multiplier * q.numerator / q.denominator;
	}
	return totalInches;
}

function denominateComplexAmount(amt, denominator) {
	if( denominator == undefined ) denominator = 1;
	let fixed = {};
	for( let unitCode in amt ) {
		let q = amt[unitCode];
		let value = q.numerator / q.denominator;
		let numerator = value * denominator;
		fixed[unitCode] = {numerator, denominator};
	}
	return fixed;
}

if( mode == 'diagonal' ) {
	let totalSquared = 0;
	for( let i in inputStrings ) {
		let amt = parseComplexAmount(inputStrings[i]);
		let inches = toInches(amt);
		totalSquared += inches*inches;
	}
	let amt = {"in": {numerator: Math.sqrt(totalSquared), denominator:1}};
	console.log("diagonal = "+formatComplexAmount(amt));
} else {
	for( let i in inputStrings ) {
		let amt = parseComplexAmount(inputStrings[i]);
		amt = {"in": {numerator:toInches(amt), denominator:1}};
		amt = denominateComplexAmount(amt, denominator);
		console.log(inputStrings[i] + " = " + formatComplexAmount(amt));
	}
}
